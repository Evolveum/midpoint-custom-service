<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2014-2016 Evolveum
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:jaxws="http://cxf.apache.org/jaxws"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://cxf.apache.org/jaxws
            http://cxf.apache.org/schemas/jaxws.xsd"
        default-lazy-init="false">

    <context:annotation-config/>
    <context:component-scan base-package="com.example.midpoint.service.server"/>
    <context:spring-configured/>

    <import resource="classpath:META-INF/cxf/cxf.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>

    <jaxws:endpoint id="exampleWS"
            address="/example-1"
            wsdlLocation="classpath:xml/ns/custom/example-1.wsdl"
            serviceName="ex:ExampleService"
            endpointName="ex:ExamplePort"
            xmlns:ex="http://midpoint.example.com/xml/ns/example-1">

        <jaxws:implementor>
            <bean parent="exampleWebService"/>
        </jaxws:implementor>

        <jaxws:inInterceptors>
            <!-- Takes care of auth/auth using custom validator configured in properties lower. -->
            <bean class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">
                <constructor-arg>
                    <map>
                        <!-- Security action is needed, otherwise you'll get fault: No security action was defined! -->
                        <entry key="action" value="UsernameToken"/>
                    </map>
                </constructor-arg>
            </bean>

            <!--
            PRE_INVOKE: additional authorizations that are unnatural in UserToken Validator.
            It's easier to work with SoapMessage to obtain things like operation, etc.
            It's important to choose the right Phase to make the information available.
            -->
            <bean class="com.example.midpoint.service.infra.WsAuthorizationInterceptor"/>

            <!-- POST_INVOKE: cleans up the security context after the WS method call. -->
            <bean class="com.example.midpoint.service.infra.WsSecurityContextCleanupInterceptor"/>
        </jaxws:inInterceptors>

        <jaxws:outInterceptors>
            <!-- none -->
        </jaxws:outInterceptors>

        <jaxws:properties>
            <!-- Validates WS-Security user token. -->
            <entry key="ws-security.ut.validator">
                <bean class="com.example.midpoint.service.infra.WsUsernameTokenValidator"/>
            </entry>

            <!-- with this property, Type attribute of Password element is not checked -->
            <entry key="ws-security.is-bsp-compliant" value="false"/>

            <entry key="org.apache.cxf.logging.FaultListener">
                <bean class="com.example.midpoint.service.infra.WsFaultListener"/>
            </entry>
        </jaxws:properties>

        <jaxws:features>
            <!-- bean implemented in midPoint (for now) -->
            <ref bean="loggingFeature"/>
        </jaxws:features>
    </jaxws:endpoint>
</beans>
